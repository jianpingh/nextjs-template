name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main, dev, staging]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci

      - name: Build application
        run: |
          npm run build

      - name: Run tests (if available)
        run: |
          # npm test
          echo "Tests will be run here when available"

      - name: Run linting
        run: |
          npm run lint

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        env:
          ECR_REPOSITORY: nextjs-order-management
        run: |
          echo "🏗️ Checking if ECR repository exists..."
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region ${{ secrets.AWS_REGION }} || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY --region ${{ secrets.AWS_REGION }}
          echo "✅ ECR repository is ready!"

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nextjs-order-management
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nextjs-order-management
          IMAGE_TAG: ${{ github.sha }}
          CONTAINER_NAME: nextjs-order-management
        run: |
          # Determine target server based on branch
          if [[ "${GITHUB_REF}" == "refs/heads/dev" ]]; then
            HOST="${{ secrets.DEV_EC2_HOST }}"
            USER="${{ secrets.DEV_EC2_USER }}"
            KEY="${{ secrets.DEV_EC2_PRIVATE_KEY }}"
            PORT="3001"
          elif [[ "${GITHUB_REF}" == "refs/heads/staging" ]]; then
            HOST="${{ secrets.STAGING_EC2_HOST }}"
            USER="${{ secrets.STAGING_EC2_USER }}"
            KEY="${{ secrets.STAGING_EC2_PRIVATE_KEY }}"
            PORT="3002"
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            HOST="${{ secrets.PROD_EC2_HOST }}"
            USER="${{ secrets.PROD_EC2_USER }}"
            KEY="${{ secrets.PROD_EC2_PRIVATE_KEY }}"
            PORT="3000"
          else
            echo "Unsupported branch"
            exit 1
          fi

          # Create SSH private key file
          echo "$KEY" > ec2_key.pem
          chmod 600 ec2_key.pem

          echo "🔐 Connecting to EC2 instance: $USER@$HOST"
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no "$USER@$HOST" << EOF
            echo '🔧 Configuring AWS CLI...'
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ secrets.AWS_REGION }}

            echo '🛂 Logging into ECR...'
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            echo '🛑 Stopping and removing old container (if exists)...'
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true

            echo '📥 Pulling latest image...'
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            echo '🚀 Starting new container...'
            sudo docker run -d --name $CONTAINER_NAME -p $PORT:3000 --restart always \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_API_BASE_URL=${{ secrets.API_BASE_URL }} \
              -e NEXT_PUBLIC_APP_NAME="Order Management System" \
              $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            echo '🔍 Checking container status...'
            sudo docker ps | grep $CONTAINER_NAME

            echo '🧹 Cleaning up old images...'
            sudo docker image prune -f

            echo '✅ Deployment completed successfully!'
          EOF

          # Clean up private key file
          rm -f ec2_key.pem

      - name: Health Check
        env:
          HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL }}
        run: |
          if [[ ! -z "$HEALTH_CHECK_URL" ]]; then
            echo "🏥 Performing health check..."
            sleep 30  # Wait for container to start
            curl -f $HEALTH_CHECK_URL || exit 1
            echo "✅ Health check passed!"
          else
            echo "⚠️ No health check URL configured"
          fi
